<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="MSI" failures="3" tests="122" name="Revature_project2" time="49.047" errors="0" timestamp="2022-01-12T11:34:54 PST">
  <testcase classname="dao.CommentDAOTests" name="createComment" time="1.233"/>
  <testcase classname="dao.CommentDAOTests" name="deleteCommentById" time="1.01"/>
  <testcase classname="dao.CommentDAOTests" name="getAllComments" time="0.976"/>
  <testcase classname="dao.CommentDAOTests" name="getCommentsByPostId" time="0.976"/>
  <testcase classname="dao.CommentDAOTests" name="selectCommentById" time="0.969"/>
  <testcase classname="dao.CommentDAOTests" name="selectCommentByIdFail" time="0.991"/>
  <testcase classname="service.CommentServiceTests" name="serviceCreateComment" time="0.011"/>
  <testcase classname="service.CommentServiceTests" name="serviceCreateEmptyComment" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceCreateLongComment" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceCreateNegativePostID" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceCreateNegativeUserID" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceDeleteCommentByID" time="0.002"/>
  <testcase classname="service.CommentServiceTests" name="serviceDeleteCommentByNegativeId" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceGetCommentByID" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceGetCommentByNegativeId" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceGetCommentsByNegativePostID" time="0.0"/>
  <testcase classname="service.CommentServiceTests" name="serviceGetCommentsByPostID" time="0.001"/>
  <testcase classname="dao.RelationshipsDAOTests" name="followByIds" time="0.986"/>
  <testcase classname="dao.RelationshipsDAOTests" name="followByIdsNonExistingMyId" time="0.976"/>
  <testcase classname="dao.RelationshipsDAOTests" name="followByIdsNonExistingTargetId" time="0.968"/>
  <testcase classname="dao.RelationshipsDAOTests" name="getFollowersByNonExistingUserId" time="0.955"/>
  <testcase classname="dao.RelationshipsDAOTests" name="getFollowersByUserId" time="0.978">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at dao.RelationshipsDAOTests.getFollowersByUserId(RelationshipsDAOTests.java:69)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- getFollowersByUserId -->
  <testcase classname="dao.RelationshipsDAOTests" name="getFollowingByNonExistingUserId" time="0.978"/>
  <testcase classname="dao.RelationshipsDAOTests" name="getFollowingByUserId" time="0.983"/>
  <testcase classname="dao.RelationshipsDAOTests" name="getLikesByNonExistingPostId" time="0.966"/>
  <testcase classname="dao.RelationshipsDAOTests" name="getLikesByPostId" time="1.056">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at dao.RelationshipsDAOTests.getLikesByPostId(RelationshipsDAOTests.java:15)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- getLikesByPostId -->
  <testcase classname="dao.RelationshipsDAOTests" name="likeByIdsNonExistingPostId" time="0.961"/>
  <testcase classname="dao.RelationshipsDAOTests" name="likeByIdsNonExistingUserId" time="0.952"/>
  <testcase classname="dao.RelationshipsDAOTests" name="unfollowByIds" time="0.969"/>
  <testcase classname="dao.RelationshipsDAOTests" name="unfollowByIdsNonExistingMyId" time="0.969"/>
  <testcase classname="dao.RelationshipsDAOTests" name="unfollowByIdsNonExistingTargetId" time="0.956"/>
  <testcase classname="dao.RelationshipsDAOTests" name="unlikeByIds" time="0.962">
    <failure type="java.lang.AssertionError" message="expected [true] but found [false]">
      <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at dao.RelationshipsDAOTests.unlikeByIds(RelationshipsDAOTests.java:39)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at com.intellij.rt.testng.IDEARemoteTestNG.run(IDEARemoteTestNG.java:66)
at com.intellij.rt.testng.RemoteTestNGStarter.main(RemoteTestNGStarter.java:109)
... Removed 28 stack frames]]>
    </failure>
  </testcase> <!-- unlikeByIds -->
  <testcase classname="dao.RelationshipsDAOTests" name="unlikeByIdsNonExistingPostId" time="0.97"/>
  <testcase classname="dao.RelationshipsDAOTests" name="unlikeByIdsNonExistingUserId" time="0.955"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceFollowByIdsNegativeIds" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceFollowByIdsNegativeMyId" time="0.001"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceFollowByIdsNegativeTargetId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceFollowByIdsValid" time="0.001"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceGetFollowersByUserIdNegativeUserId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceGetFollowersByUserIdValid" time="0.001"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceGetFollowingByUserIdNegativeUserId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceGetFollowingByUserIdValid" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceLikeByIdsNegativeIds" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceLikeByIdsNegativePostId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceLikeByIdsNegativeUserId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceLikeByIdsValid" time="0.001"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnfollowByIdsNegativeIds" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnfollowByIdsNegativeMyId" time="0.001"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnfollowByIdsNegativeTargetId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnfollowByIdsValid" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnlikeByIdsNegativeIds" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnlikeByIdsNegativePostId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnlikeByIdsNegativeUserId" time="0.0"/>
  <testcase classname="service.RelationshipsServiceTests" name="serviceUnlikeByIdsValid" time="0.0"/>
  <testcase classname="dao.UserDAOTests" name="testCreateAccountExistingEmail" time="0.954"/>
  <testcase classname="dao.UserDAOTests" name="testCreateAccountExistingUserName" time="0.963"/>
  <testcase classname="dao.UserDAOTests" name="testCreateAccountSuccess" time="0.969"/>
  <testcase classname="dao.UserDAOTests" name="testDeleteUserByIdNonExistingId" time="0.98"/>
  <testcase classname="dao.UserDAOTests" name="testEditUserInformationByIdExistingEmail" time="0.962"/>
  <testcase classname="dao.UserDAOTests" name="testEditUserInformationByIdExistingName" time="0.969"/>
  <testcase classname="dao.UserDAOTests" name="testEditUserInformationByIdNonExistingId" time="1.006"/>
  <testcase classname="dao.UserDAOTests" name="testEditUserInformationByIdSuccess" time="0.95"/>
  <testcase classname="dao.UserDAOTests" name="testGetUserByIdNonExistingId" time="1.051"/>
  <testcase classname="dao.UserDAOTests" name="testGetUserByIdSuccess" time="0.954"/>
  <testcase classname="dao.UserDAOTests" name="testGetUsers" time="0.967"/>
  <testcase classname="dao.UserDAOTests" name="testGetUsersByFirstNameNonExistingFirstName" time="0.964"/>
  <testcase classname="dao.UserDAOTests" name="testGetUsersByFirstNameSuccess" time="0.949"/>
  <testcase classname="dao.UserDAOTests" name="testRequestLoginIncorrectCredentialsCase1" time="0.958"/>
  <testcase classname="dao.UserDAOTests" name="testRequestLoginIncorrectCredentialsCase2" time="0.954"/>
  <testcase classname="dao.UserDAOTests" name="testRequestLoginIncorrectCredentialsCase3" time="0.959"/>
  <testcase classname="dao.UserDAOTests" name="testRequestLoginSuccess" time="0.96"/>
  <testcase classname="dao.UserDAOTests" name="testDeleteUserByIdSuccess" time="1.084"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginEmptyPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginEmptyUserName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginEmptyUserNameAndPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginLongPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginLongUserName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="serviceRequestLoginLongUserNameAndPassword" time="0.001"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountEmptyEmail" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountEmptyFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountEmptyLastName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountEmptyPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountEmptyUserName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountLongEmail" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountLongFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountLongLastName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountLongPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceCreateAccountLongUserName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceDeleteUserByIdNegativeId" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdEmptyEmail" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdEmptyFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdEmptyLastName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdEmptyUserName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdLongEmail" time="0.001"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdLongFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdLongLastName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdLongPassword" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdLongUserName" time="0.001"/>
  <testcase classname="service.UserServiceTests" name="testServiceEditUserInformationByIdNegativeId" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceGetUserByFirstNameEmptyFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceGetUserByFirstNameLongFirstName" time="0.0"/>
  <testcase classname="service.UserServiceTests" name="testServiceGetUserByIdNegativeId" time="0.0"/>
  <testcase classname="dao.PostDAOTests" name="createPost" time="0.955"/>
  <testcase classname="dao.PostDAOTests" name="createPostWrongUserId" time="1.022"/>
  <testcase classname="dao.PostDAOTests" name="deletePostsByPostId" time="1.103"/>
  <testcase classname="dao.PostDAOTests" name="getAllPosts" time="1.142"/>
  <testcase classname="dao.PostDAOTests" name="getPostById" time="1.061"/>
  <testcase classname="dao.PostDAOTests" name="getPostByNonExistingId" time="0.964"/>
  <testcase classname="dao.PostDAOTests" name="getPostsByNonExistingUserId" time="0.97"/>
  <testcase classname="dao.PostDAOTests" name="getPostsByUserId" time="0.954"/>
  <testcase classname="service.PostServiceTests" name="serviceCreatePostEmptyString" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceCreatePostLongsString" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceCreatePostNegativeUserId" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceCreatePostValid" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceDeletePostByIdInvalidId" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceDeletePostByIdValid" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostByIdInvalidId" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostByIdValid" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostByUserIdInvalidId" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostByUserIdValid" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostModuleByIdInvalidId" time="0.0"/>
  <testcase classname="service.PostServiceTests" name="serviceGetPostModuleByIdValid" time="0.0"/>
</testsuite> <!-- Revature_project2 -->
